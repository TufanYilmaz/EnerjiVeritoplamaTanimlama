@model List<SayacTanimlari>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Veri Seçimi</h5>
                </div>
                <div class="card-body">
                    <form id="graphForm" onsubmit="return false;">
                        <div class="form-group mb-3">
                            <label for="TimeTypeId">Zaman Tipi</label>
                            <select class="form-control" name="TimeTypeId" id="TimeTypeId" required>
                                <option value="">Seçiniz</option>
                                <option value="1">Günlük</option>
                                <option value="2">Aylık</option>
                            </select>
                        </div>
                        <div id="Gun" class="form-group mb-3" style="display:none">
                            <label for="Gun">Gün</label>
                            <input type="date" name="Gun" class="form-control">
                        </div>
                        <div id="Ay" class="form-group mb-3" style="display:none">
                            <label for="Ay">Ay</label>
                            <input type="month" name="Ay" class="form-control">
                        </div>
                        <div class="form-group mb-3">
                            <label for="SayacId">Sayaç</label>
                            <select class="form-control" name="SayacId" id="SayacId" required>
                                @if (Model != null && Model.Any())
                                {
                                    foreach (var item in Model)
                                    {
                                        <option value="@item.Id">@item.SayacKodu  -  @item.SayacTanimi </option>
                                        
                                    }
                                }
                                else
                                {
                                    <option value="">Mevcut Sayaç Yok</option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary" onclick="loadGraphData()">Göster</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="selectedMetersContainer" class="row mb-4" style="display:none">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Seçili Sayaçlar</h5>
                </div>
                <div class="card-body">
                    <div id="selectedMetersList" class="d-flex flex-wrap gap-2">
                        <!-- Selected meters will be added here dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="errorContainer" class="row" style="display:none">
        <div class="col-12">
            <div class="alert alert-danger">
                <h4>Hata!</h4>
                <p id="errorMessage"></p>
            </div>
        </div>
    </div>

    <div id="graphContainer" class="row" style="display:none">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 id="chartTitle"></h5>
                </div>
                <div class="card-body">
                    <div id="chartContainer" style="width: 100%; height: 450px;"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="noDataContainer" class="row" style="display:none">
        <div class="col-md-12">
            <div class="alert alert-warning">
                <h4>Uyarı!</h4>
                <p>Seçilen kriterlere uygun veri bulunamadı.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/setdate.js"></script>
    <script src="~/js/chartHelper.js"></script>
    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js" defer></script>
    <script>
        let currentChart = null;
        let selectedMeters = new Map(); // Store selected meters with their data

        function addSelectedMeter(meterId, meterCode, chartData) {
            if (selectedMeters.has(meterId)) return; // Skip if already selected

            // Add to selected meters map
            selectedMeters.set(meterId, {
                code: meterCode,
                data: chartData
            });

            // Create meter badge
            const badge = document.createElement('div');
            badge.className = 'badge bg-primary p-2 d-flex align-items-center';
            badge.innerHTML = `
                <span>${meterCode}</span>
                <button type="button" class="btn-close btn-close-white ms-2" 
                        onclick="removeMeter(${meterId})" aria-label="Close"></button>
            `;
            document.getElementById('selectedMetersList').appendChild(badge);

            // Show container if hidden
            document.getElementById('selectedMetersContainer').style.display = 'block';

            // Update chart
            updateChart();
        }

        function removeMeter(meterId) {
            // Get the meter code before removing from map
            const meterCode = selectedMeters.get(meterId)?.code;
            
            // Remove from map
            selectedMeters.delete(meterId);

            // Remove badge
            const badges = document.querySelectorAll('#selectedMetersList .badge');
            badges.forEach(badge => {
                if (badge.textContent.trim() === meterCode) {
                    badge.remove();
                }
            });

            // Hide container if no meters left
            if (selectedMeters.size === 0) {
                document.getElementById('selectedMetersContainer').style.display = 'none';
            }

            // Update chart
            updateChart();
        }

        function updateChart() {
            if (selectedMeters.size === 0) {
                if (currentChart) {
                    currentChart.destroy();
                    currentChart = null;
                }
                document.getElementById('graphContainer').style.display = 'none';
                return;
            }

            // Show graph container
            document.getElementById('graphContainer').style.display = 'block';
            
            // Create series array
            const series = [];
            let maxValue = 0;
            let chartTitle = 'Sayaç Karşılaştırma';

            selectedMeters.forEach((meterData, meterId) => {
                const chartData = JSON.parse(meterData.data);
                if (chartData && chartData.length > 0) {
                    series.push({
                        dataSource: chartData,
                        xName: 'Zaman',
                        yName: 'Deger',
                        name: meterData.code,
                        type: 'Line',
                        width: 3,
                        dashArray: '',
                        fill: getRandomColor(),
                        marker: {
                            visible: true,
                            width: 10,
                            height: 10,
                            shape: 'Circle',
                            isFilled: true,
                            fill: getRandomColor(),
                            border: { width: 2, color: '#ffffff' }
                        }
                    });

                    // Update max value
                    const meterMax = Math.max(...chartData.map(d => d.Deger));
                    maxValue = Math.max(maxValue, meterMax);
                }
            });

            // Destroy existing chart if it exists
            if (currentChart) {
                currentChart.destroy();
            }

            // Create new chart
            currentChart = new ej.charts.Chart({
                primaryXAxis: {
                    valueType: 'Category',
                    title: document.getElementById('TimeTypeId').value == 1 ? 'Saat' : 'Gün',
                    labelIntersectAction: 'Rotate45',
                    majorGridLines: { width: 0.5, color: '#e0e0e0' },
                    labelStyle: {
                        fontWeight: '600',
                        size: '12px',
                        color: '#333'
                    },
                    titleStyle: {
                        size: '14px',
                        fontWeight: '600',
                        color: '#424242'
                    }
                },
                primaryYAxis: {
                    title: 'Değer',
                    minimum: 0,
                    maximum: maxValue * 1.05,
                    interval: maxValue / 10,
                    labelFormat: '#,##0.00',
                    majorGridLines: { width: 0.5, color: '#e0e0e0' },
                    majorTickLines: { width: 0 },
                    minorTickLines: { width: 0 },
                    labelStyle: {
                        fontWeight: '500',
                        size: '11px',
                        color: '#424242'
                    },
                    titleStyle: {
                        size: '14px',
                        fontWeight: '600',
                        color: '#424242'
                    }
                },
                chartArea: { 
                    border: { width: 0 },
                    background: '#fff'
                },
                tooltip: {
                    enable: true,
                    shared: false,
                    format: '${point.x}: <b>${point.y}</b>',
                    textStyle: {
                        fontWeight: 'bold',
                        size: '14px',
                        color: '#333333'
                    },
                    fill: '#ffffff',
                    opacity: 0.9,
                    border: { width: 1, color: '#009688' }
                },
                title: chartTitle,
                titleStyle: {
                    size: '16px',
                    fontWeight: 'bold',
                    color: '#212529',
                    textAlignment: 'Center'
                },
                legendSettings: { 
                    visible: true,
                    position: 'Bottom',
                    textStyle: {
                        size: '13px',
                        color: '#424242'
                    },
                    background: 'transparent',
                    border: { width: 0 }
                },
                width: '100%',
                height: '450px',
                background: '#ffffff',
                margin: { left: 15, right: 15, top: 20, bottom: 15 },
                series: series,
                loaded: function(args) {
                    console.log("Grafik yükleme tamamlandı!");
                },
                load: function(args) {
                    args.chart.theme = "Material";
                }
            });
            
            currentChart.appendTo('#chartContainer');
        }

        function getRandomColor() {
            const colors = [
                '#009688', '#2196f3', '#ff9800', '#e91e63', '#4caf50',
                '#9c27b0', '#f44336', '#3f51b5', '#795548', '#607d8b'
            ];
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function loadGraphData() {
            const form = document.getElementById('graphForm');
            const formData = new FormData(form);
            const selectedMeter = document.getElementById('SayacId');
            const meterCode = selectedMeter.options[selectedMeter.selectedIndex].text;
            
            // Show loading state
            document.getElementById('errorContainer').style.display = 'none';
            
            fetch('/SayacVeriGrafik/GetGraphData', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide error container if visible
                    document.getElementById('errorContainer').style.display = 'none';
                    
                    // Add the selected meter to the list
                    addSelectedMeter(data.sayacId, meterCode, data.chartData);
                    
                    // Reset the form selection
                    selectedMeter.value = '';
                } else {
                    // Show error message
                    document.getElementById('errorContainer').style.display = 'block';
                    document.getElementById('errorMessage').textContent = data.message;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('errorContainer').style.display = 'block';
                document.getElementById('errorMessage').textContent = 'Veri yüklenirken bir hata oluştu.';
            });
        }

        // Form yüklendiğinde çalışacak kod
        document.addEventListener("DOMContentLoaded", function() {
            // Trigger the change event to show/hide the appropriate date inputs
            var timeTypeSelect = document.getElementById("TimeTypeId");
            if (timeTypeSelect.value) {
                timeTypeSelect.dispatchEvent(new Event('change'));
            }
        });
    </script>
}