@model List<SuperFilm.Enerji.Entites.OpcNodes>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">OpcNode Veri Seçimi</h5>
                    <button type="button" class="btn btn-danger btn-sm" onclick="clearAllNodes()">Sıfırla</button>
                </div>
                <div class="card-body">
                    <form id="graphForm" onsubmit="return false;">
                        <div class="form-group mb-3">
                            <label for="TimeTypeId">Zaman Tipi</label>
                            <select class="form-control" name="TimeTypeId" id="TimeTypeId" required>
                                <option value="">Seçiniz</option>
                                <option value="1">Günlük</option>
                                <option value="2">Aylık</option>
                            </select>
                        </div>
                        <div id="Gun" class="form-group mb-3" style="display:none">
                            <label for="Gun">Gün</label>
                            <input id="dateEditGun" type="date" name="Gun" class="form-control">
                        </div>
                        <div id="Ay" class="form-group mb-3" style="display:none">
                            <label for="Ay">Ay</label>
                            <input id="dateEditAy" type="month" name="Ay" class="form-control">
                        </div>

                        <div class="form-group mb-3">
                            <label for="OpcNodesId">OPC Node</label>
                            <select class="form-control" name="OpcNodesId" id="OpcNodesId" required>
                                <option value="">Seçiniz</option>
                               @if (Model != null && Model.Any())
                               {
                                    @foreach (var item in Model ?? Enumerable.Empty<SuperFilm.Enerji.Entites.OpcNodes>())
                                    {
                                        <option value="@item.Id"> @item.Code [ @item.Description ] </option>
                                    }
                               }
                                else
                                {
                                <option value="">Mevcut OPC Node Yok</option>
                                }
                            </select>
                        </div>
@* 
                        <div class="form-group mb-3">
                            <label for="OpcNodesId2">İkinci OPC Node (Opsiyonel)</label>
                            <select class="form-control" name="OpcNodesId2" id="OpcNodesId2">
                                <option value="">Seçiniz</option>
                              
                                @if(Model!=null && Model.Any())
                                {
                                    @foreach (var item in Model ?? Enumerable.Empty<SuperFilm.Enerji.Entites.SayacVeri>())
                                    {
                                        <option value="@item.OpcNodesId">@item.OpcNodesId -@item.Kod</option>
                                    }
                                }
                            </select>
                        </div> *@
                        <button type="submit" class="btn btn-primary" onclick="loadGraphData()">Grafiğe Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="selectedNodesContainer" class="row mb-4" style="display:none">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Seçili OPC Node'lar</h5>
                    <button type="button" class="btn btn-danger btn-sm" onclick="clearAllNodes()">Grafiği Temizle</button>
                </div>
                <div class="card-body">
                    <div id="selectedNodesList" class="d-flex flex-wrap gap-2 mb-2">
                    </div>
                   
                </div>
            </div>
        </div>
    </div>

    <div id="errorContainer" class="row" style="display:none">
        <div class="col-12">
            <div class="alert alert-danger">
                <h4>Hata!</h4>
                <p id="errorMessage"></p>
            </div>
        </div>
    </div>

    <div id="graphContainer" class="row" style="display:none">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 id="chartTitle"></h5>
                </div>
                <div class="card-body">
                    <div id="chartContainer" style="width: 100%; height: 450px;"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="noDataContainer" class="row" style="display:none">
        <div class="col-md-12">
            <div class="alert alert-warning">
                <h4>Uyarı!</h4>
                <p>Seçilen kriterlere uygun veri bulunamadı.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/setdate.js"></script>
    <script src="~/js/chartHelper.js"></script>
    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js" defer></script>
    <script>
        let currentChart = null;
        let selectedNodes = new Map(); // Store selected nodes with their data

        function addSelectedNode(nodeId, nodeCode, chartData) {
            if (selectedNodes.has(nodeId)) return; // Skip if already selected

            // Add to selected nodes map
            selectedNodes.set(nodeId, {
                code: nodeCode,
                data: chartData
            });

            // Create node badge
            const badge = document.createElement('div');
            badge.className = 'badge bg-primary p-2 d-flex align-items-center';
            badge.innerHTML = `
                <span>${nodeId}-${nodeCode}</span>
                <button type="button" class="btn-close btn-close-white ms-2" 
                        onclick="removeNode(${nodeId})" aria-label="Close"></button>
            `;
            document.getElementById('selectedNodesList').appendChild(badge);

            // Show container if hidden
            document.getElementById('selectedNodesContainer').style.display = 'block';

            // Update chart
            updateChart();
        }

        function removeNode(nodeId) {
            // Remove from map
            selectedNodes.delete(nodeId);

            // Remove badge
            const badges = document.querySelectorAll('#selectedNodesList .badge');
            badges.forEach(badge => {
                if (badge.textContent.includes(`${nodeId}-`)) {
                    badge.remove();
                }
            });

            // Hide container if no nodes left
            if (selectedNodes.size === 0) {
                document.getElementById('selectedNodesContainer').style.display = 'none';
            }

            // Update chart
            updateChart();
        }

        function updateChart() {
            if (selectedNodes.size === 0) {
                if (currentChart) {
                    currentChart.destroy();
                    currentChart = null;
                }
                document.getElementById('graphContainer').style.display = 'none';
                return;
            }

            // Show graph container
            document.getElementById('graphContainer').style.display = 'block';
            
            // Create series array
            const series = [];
            let maxValue = 0;
            let chartTitle = 'OPC Node Karşılaştırma';

            selectedNodes.forEach((nodeData, nodeId) => {
                const chartData = JSON.parse(nodeData.data);
                if (chartData && chartData.length > 0) {
                    series.push({
                        dataSource: chartData,
                        xName: document.getElementById('TimeTypeId').value == 1 ? 'Zaman' : 'Gun',
                        yName: 'Deger',
                        name: nodeData.code,
                        type: 'Line',
                        width: 3,
                        dashArray: '',
                        fill: getRandomColor(),
                        marker: {
                            visible: true,
                            width: 10,
                            height: 10,
                            shape: 'Circle',
                            isFilled: true,
                            fill: getRandomColor(),
                            border: { width: 2, color: '#ffffff' }
                        }
                    });

                    // Update max value
                    const nodeMax = Math.max(...chartData.map(d => d.Deger));
                    maxValue = Math.max(maxValue, nodeMax);
                }
            });

            // Destroy existing chart if it exists
            if (currentChart) {
                currentChart.destroy();
            }

            // Create new chart
            currentChart = new ej.charts.Chart({
                primaryXAxis: {
                    valueType: 'Category',
                    title: document.getElementById('TimeTypeId').value == 1 ? 'Saat' : 'Gün',
                    labelIntersectAction: 'Rotate45',
                    majorGridLines: { width: 0.5, color: '#e0e0e0' },
                    labelStyle: {
                        fontWeight: '600',
                        size: '12px',
                        color: '#333'
                    },
                    titleStyle: {
                        size: '14px',
                        fontWeight: '600',
                        color: '#424242'
                    }
                },
                primaryYAxis: {
                    title: 'Değer',
                    minimum: 0,
                    maximum: maxValue * 1.05,
                    interval: maxValue / 10,
                    labelFormat: '#,##0.00',
                    majorGridLines: { width: 0.5, color: '#e0e0e0' },
                    majorTickLines: { width: 0 },
                    minorTickLines: { width: 0 },
                    labelStyle: {
                        fontWeight: '500',
                        size: '11px',
                        color: '#424242'
                    },
                    titleStyle: {
                        size: '14px',
                        fontWeight: '600',
                        color: '#424242'
                    }
                },
                chartArea: { 
                    border: { width: 0 },
                    background: '#fff'
                },
                tooltip: {
                    enable: true,
                    shared: false,
                    format: '${point.x}: <b>${point.y}</b>',
                    textStyle: {
                        fontWeight: 'bold',
                        size: '14px',
                        color: '#333333'
                    },
                    fill: '#ffffff',
                    opacity: 0.9,
                    border: { width: 1, color: '#009688' }
                },
                title: chartTitle,
                titleStyle: {
                    size: '16px',
                    fontWeight: 'bold',
                    color: '#212529',
                    textAlignment: 'Center'
                },
                legendSettings: { 
                    visible: true,
                    position: 'Bottom',
                    textStyle: {
                        size: '13px',
                        color: '#424242'
                    },
                    background: 'transparent',
                    border: { width: 0 }
                },
                width: '100%',
                height: '450px',
                background: '#ffffff',
                margin: { left: 15, right: 15, top: 20, bottom: 15 },
                series: series,
                loaded: function(args) {
                    console.log("Grafik yükleme tamamlandı!");
                },
                load: function(args) {
                    args.chart.theme = "Material";
                }
            });
            
            currentChart.appendTo('#chartContainer');
        }

        function getRandomColor() {
            const colors = [
                '#009688', '#2196f3', '#ff9800', '#e91e63', '#4caf50',
                '#9c27b0', '#f44336', '#3f51b5', '#795548', '#607d8b'
            ];
            return colors[Math.floor(Math.random() * colors.length)];
        }
        function clearAllNodes() {
            selectedNodes.clear();
            document.getElementById('selectedNodesList').innerHTML = '';
            document.getElementById('selectedNodesContainer').style.display = 'none';
            if (currentChart) { currentChart.destroy(); currentChart = null; }
            document.getElementById('graphContainer').style.display = 'none';

            // Zaman Tipi alanını geri göster ve sıfırla
            const timeTypeSelect = document.getElementById('TimeTypeId');
            const timeTypeGroup = timeTypeSelect.closest('.form-group');
            timeTypeSelect.value = '';
            timeTypeGroup.style.display = 'block';

            // Gün/Ay alanlarını gizle ve içeriği temizle
            document.getElementById('Gun').style.display = 'none';
            document.getElementById('Ay').style.display = 'none';
            document.getElementById('dateEditGun').value = '';
            document.getElementById('dateEditAy').value = '';
        }

        function loadGraphData() {
            // $("#TimeTypeId").prop("disabled", true);
            // $("#dateEditAy").prop("disabled", true);
            // $("#dateEditGun").prop("disabled", true);
            // $("#TimeTypeId").hide();
            // $("#dateEditAy").hide();
            // $("#dateEditGun").hide();
            const form = document.getElementById('graphForm');
            const formData = new FormData(form);
            const selectedNode = document.getElementById('OpcNodesId');
            const nodeCode = selectedNode.options[selectedNode.selectedIndex].text;// .text.split('-')[1].trim();
            
            // Show loading state
            document.getElementById('errorContainer').style.display = 'none';
            
            fetch('/OpcNodesGrafik/GetGraphData', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide error container if visible
                    document.getElementById('errorContainer').style.display = 'none';
                    
                    // Add the selected node to the list
                    addSelectedNode(data.selectedNodeId, nodeCode, data.chartData);
                    
                    // Reset the form selection
                    selectedNode.value = '';
                } else {
                    // Show error message
                    document.getElementById('errorContainer').style.display = 'block';
                    document.getElementById('errorMessage').textContent = data.message;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('errorContainer').style.display = 'block';
                document.getElementById('errorMessage').textContent = 'Veri yüklenirken bir hata oluştu.';
            });
        }

        // Form yüklendiğinde çalışacak kod
        document.addEventListener("DOMContentLoaded", function () {
              const timeTypeSelect = document.getElementById("TimeTypeId");
              const gunDiv = document.getElementById("Gun");
              const ayDiv = document.getElementById("Ay");
              const timeTypeGroup = timeTypeSelect.closest('.form-group');

              timeTypeSelect.addEventListener("change", function () {
                  if (this.value === "1") {
                      gunDiv.style.display = "block";
                      ayDiv.style.display = "none";
                  } else if (this.value === "2") {
                      ayDiv.style.display = "block";
                      gunDiv.style.display = "none";
                  }

                 
                  timeTypeGroup.style.display = "none";
              });

              if (timeTypeSelect.value) {
                  timeTypeSelect.dispatchEvent(new Event("change"));
              }
          });
    </script>
} 